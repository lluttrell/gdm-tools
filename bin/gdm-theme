#!/bin/bash

# This script compiles and sets given
# gnome-shell theme as GDM3 theme


# Here are some variables to be used in the script

ProgName=$(basename "$0")       # Program's Name
ThemesDir=/usr/share/themes     # Directory that contains themes
tmpDir=/tmp/gdm-theme           # Directory for storing temprary files
tempThemeDir=$tmpDir/theme      # Directory to temprarily store theme files for processing
tempExtractedDir=$tmpDir/extracted      # Directory to temprarily store theme files extracted from some gresource file
gnomeShellDir=/usr/share/gnome-shell    # Directory that contains gnome-shell and GDM related files
gdmGresourceFile=$gnomeShellDir/gnome-shell-theme.gresource # Gresource file to be used by GDM
ubuntuGresourceFile=$gnomeShellDir/gdm3-theme.gresource     # Gresource file to be used by GDM on Ubuntu and derivatives
gdmGresourceBackup=$gdmGresourceFile.bak                    # Backup of original/default GDM gresource file
gdmGresourceDefault=$gdmGresourceFile.default               # GDM gresource file to be used as the default theme
deprecatedGresourceBackups=$gdmGresourceFile.original       # Files that were previously used as backup but now they don't
gdmBackground=$gnomeShellDir/theme/gdm-background           # File to be used as GDM background
gdm3css=/etc/alternatives/gdm3.css      # Symlink used by update-alternatives program to provide gdm3.css file
gresource=gnome-shell-theme.gresource   # Short alias/name for a long file name
customThemeIdentity=custom-theme        # File that will be used to distinguish gresource file generated by this script from original/default gresource file
# String to be added at the end of gnome-shell.css file in order to be able to use a background image
NewBgr="
#lockDialogGroup {
  background-image: url('file://$gdmBackground');
  background-size: cover;
}"

initFun(){
  case $1 in
    -s | set )
      if ! which glib-compile-resources gresource > /dev/null; then
        echo "This script needs GLib (developer edition) in order to work. But it was not found." > /dev/stderr
        exit 4
      fi
    ;;
  esac

  if [ $UID != 0 ]; then
    local rootNeeded
    case $1 in
      -r | reset | -s | set | -b | backup )
        rootNeeded=true
      ;;
      -x | extract)
        rootNeeded=true
        if [ -n "$2" ];then
          local dirToCheck="$(realpath -m "$2")"
          if mkdir -p "$dirToCheck" 2>/dev/null && [ -w "$dirToCheck" ]; then
		  rootNeeded=false
          fi
        fi
      ;;
      *)
        rootNeeded=false
      ;;
    esac

    if [[ $rootNeeded = true ]]; then
      # check if user has sudo installed
      if which sudo &> /dev/null; then
        # run this script with sudo
        sudo "$0" "$@"
        exit $?
      elif which su &> /dev/null; then
        # run this script as root
        su -c "$0 $@"
        exit $?
      else
        echo "Plz, run this program as root" > /dev/stderr
        exit 1
      fi
    fi
  fi
}

notRecognized() {
  echo "action '$1' was not recogninzed, use -h, [--]help for help" > /dev/stderr && exit 2
}

help() {
  echo -en "gdm-theme: a program to change gnome login theme and background
Usage: ${ProgName} <Option> [arguments]
Options:
  -l,list \t\t\t List available theme options
  -s,set <theme> [image|none] \t Set theme and optionaly background
  -s,set -b,--background [image] Set background image only
  -r,reset \t\t\t Reset everything to default
  -b,backup {update|restore} \t Update/Restore backup of default theme
  -x,extract [location] \t Extract default theme to specified location
  -h,[--]help \t\t\t Print this help message
  -m,manual \t\t\t Provide detailed help
  -e,examples \t\t\t Explain this program with examples
You can also run 'man $ProgName' for more detailed help
"
}

examples() {
  echo -n "gdm-theme: a program to change gnome login theme and background

EXAMPLES:

$ProgName -l
$ProgName list
    Either of the above commands will list all the themes that can be set as Gnome/Ubuntu Login (GDM) theme

$ProgName -s Materia
$ProgName set Materia
    Either of the above commands will set 'Materia' as GDM theme without changing the background image

$ProgName -s default
$ProgName set default
    Either of the above commands will set GDM theme to default/original without changing the background image

$ProgName -s Materia ~/Pictures/MyWallpaper.jpg
$ProgName set Materia ~/Pictures/MyWallpaper.jpg
    Either of the above commands will set GDM theme to 'Materia' while also setting ~/Pictures/MyWallpaper.jpg as GDM background image

$ProgName -s default ~/Pictures/MyWallpaper.jpg
$ProgName set default ~/Pictures/MyWallpaper.jpg
    Either of the above commands will set GDM theme to default while also setting ~/Pictures/MyWallpaper.jpg as GDM background image

$ProgName -s Materia none
$ProgName set Materia none
    Either of the above commands will set GDM theme to 'Materia' while also unsetting the GDM background image

$ProgName -s default none
$ProgName set default none
    Either of the above commands will set GDM theme to default while also unsetting the GDM background image

$ProgName set --background ~/Pictures/MyWallpaper.jpg
$ProgName set -b ~/Pictures/MyWallpaper.jpg
$ProgName -s --background ~/Pictures/MyWallpaper.jpg
$ProgName -s -b ~/Pictures/MyWallpaper.jpg
    Any of the above commands will set ~/Pictures/MyWallpaper.jpg as GDM background image without changing the theme

$ProgName set --background none
$ProgName set -b none
$ProgName -s --background none
$ProgName -s -b none
    Any of the above commands will unset GDM background image without changing the theme

$ProgName backup update
$ProgName -b update
$ProgName backup -u
$ProgName -b -u
    Will update the backup to the current version of default GDM theme

$ProgName backup restore
$ProgName -b restore
$ProgName backup -r
$ProgName -b -r
    Will restore default GDM theme from backup

$ProgName -r
$ProgName reset
    Will reset everything back to the way it was before you ever run this program

$ProgName -x
$ProgName extract
    Will extract the default GDM theme to system-wide themes directory

$ProgName -x ~/.themes
$ProgName extract ~/,themes
    Will extract the default GDM theme to '.themes' directory in your home folder

$ProgName -e
$ProgName examples
    Will print this 'examples' page

man $ProgName
    Will print detailed help message (manual)
"
}

pagedHelp() {
  if [ -x "$(which $PAGER)" ];then
    $1 | $PAGER
  elif which most > /dev/null; then
    $1 | most
  else
    $1 | less
  fi
}

isDefaultGresource() {
  local targetGresourceFile
  if [ -z "$1" ]; then
    targetGresourceFile=$gdmGresourceFile
  elif [ -f "$1"  ]; then
    targetGresourceFile="$1"
  else
    echo "file '$1' not found"
    return 10
  fi
  [ -z "$(gresource list $targetGresourceFile /org/gnome/shell/theme/$customThemeIdentity)" ]
  return $?
}

getDefaultGresource() {
  local gresourcefile
  for gresourcefile in $gdmGresourceFile $gdmGresourceDefault $deprecatedGresourceBackups $gdmGresourceBackup; do
    if isDefaultGresource $gresourcefile; then
      echo $gresourcefile
      return 0
    fi
  done
  return 1
}

# This function will backup default gresource file if and only if it needs to be backed up
smart_backup() {
  local gresourcefile=$(getDefaultGresource)
  if [ ! -z "$gresourcefile" ]; then
    [ $gresourcefile != $gdmGresourceDefault ] && cp $gresourcefile $gdmGresourceDefault
    [ ! -f $gdmGresourceBackup ] && cp $gdmGresourceDefault $gdmGresourceBackup
  fi
  rm -f $deprecatedGresourceBackups
}

backup_action() {
  case $1 in 
    -u | update)
      if isDefaultGresource $gdmGresourceFile; then
        cp $gdmGresourceFile $gdmGresourceDefault
        cp $gdmGresourceDefault $gdmGresourceBackup
      elif [ -f $gdmGresourceDefault ]; then
        cp $gdmGresourceDefault $gdmGresourceBackup
      else
        echo Default GDM theme not found. > /dev/stderr
        echo Backup cannot be updated. > /dev/stderr
        return 1
      fi
    ;;
    -r | restore)
      if [ -f $gdmGresourceBackup ]; then
        cp $gdmGresourceBackup $gdmGresourceDefault
      else
        echo no backup found to restore from > /dev/stderr
        return 2
      fi
    ;;
    *)
      echo backup action not recogninzed > /dev/stderr
      return 10
    ;;
  esac
}

reset() {
  [ -f $gdmGresourceDefault ] && mv $gdmGresourceDefault $gdmGresourceFile
  [ -f $ubuntuGresourceFile ] && update-alternatives --auto gdm3-theme.gresource
  rm -f $gdmBackground
}

compile() {
  local targetThemeShellDir="$1"
  if [[ ! -z "$targetThemeShellDir" && -d "$targetThemeShellDir" ]]; then
    rm -rf $tempThemeDir
    mkdir -p $tempThemeDir
    cp -r "$targetThemeShellDir"/* $tempThemeDir
  else
    return 1
  fi
  echo "${NewBgr}" >> $tempThemeDir/gnome-shell.css
  cp $tempThemeDir/gnome-shell.css $tempThemeDir/gdm3.css
  touch $tempThemeDir/$customThemeIdentity
  # Generate gresource xml file for current theme
  local file resourceFiles=$(find ${tempThemeDir} -type f | sed "s|$tempThemeDir||" | cut -c 2- | while read file; do echo "<file>$file</file>"; done)
  local gresourceXml="<?xml version=\"1.0\" encoding=\"UTF-8\"?>
<gresources>
  <gresource prefix=\"/org/gnome/shell/theme\">
    $resourceFiles
  </gresource>
</gresources>"
  echo $gresourceXml > $tempThemeDir/$gresource.xml
  glib-compile-resources --sourcedir=$tempThemeDir $tempThemeDir/$gresource.xml
}

extract() {
  local gresourcefile=$1 r rDir
  if [ ! -f "$gresourcefile" ]; then
    echo "file '$gresourcefile' doesn't exist, so couldn't be extracted" > /dev/stderr
    return 1
  fi
  for r in $(gresource list $gresourcefile); do
    # correctly generate necessary folder structure from actual resource
    rDir=${r%/*}
    rDir=${rDir#'/org/gnome/shell/theme'}
    test ! -d "$tempExtractedDir/$rDir" && mkdir -p "$tempExtractedDir/$rDir"
    # extract the resource to the folder
    gresource extract $gresourcefile $r > $tempExtractedDir/${r#'/org/gnome/shell/theme/'}
  done
}

extract_default_theme() {
  local extractedDir
  if [ ! -z "$1" ]; then
    extractedDir="$1"
  else
    extractedDir="$ThemesDir"
  fi
  local gresourceToExtract="$(getDefaultGresource)"
  if [ ! -z "$gresourceToExtract" ]; then
    local extractedShellDir="$extractedDir"/default-extracted/gnome-shell
    extract "$gresourceToExtract"
    rm -rf "$extractedDir"/default-extracted
    mkdir -p "$extractedShellDir"
    mv -T "$tempExtractedDir" "$extractedShellDir"
  else
    echo "default theme not found, cannot extract" > /dev/stderr
    return 1
  fi
}

list() {
  local theme
  echo default
  ls -1 $ThemesDir | while read theme; do
    [ -f $ThemesDir/"$theme"/gnome-shell/gnome-shell.css ] && echo "$theme"
  done
}

set-background-image() {
  if [ ! -z "$image" ]; then
    if [ "$image" = none ]; then
      rm -f $gdmBackground
    elif [ -f "$image" ]; then
      if file -b --mime-type "$image" | grep image/.* > /dev/null ; then
        cp "$image" $gdmBackground
      else
        echo "'$image' is not an image file" > /dev/stderr
        return 1
      fi
    else
      echo "image '$image' not found" > /dev/stderr
      echo "GDM background was not changed" > /dev/stderr
      return 10
    fi
  fi
}

set-alternatives() {
  [ -f $ubuntuGresourceFile ] &&   update-alternatives --set gdm3-theme.gresource $gdmGresourceFile
}

set-custom-theme() {
  local targetThemeShellDir="$1"
  compile "$targetThemeShellDir"
  cp $tempThemeDir/$gresource $gdmGresourceFile
  set-background-image
  set-alternatives
}

set-default-theme() {
  extract $gdmGresourceDefault
  set-custom-theme $tempExtractedDir
}

set-theme() {
  theme="$1"
  image="$2"
  ThemeShellDir=$ThemesDir/"$theme"/gnome-shell
  if [ "$theme" = 'default' ]; then
    set-default-theme
  elif [[ "$theme" = "-b" || "$theme" = "--background" ]]; then
    if isDefaultGresource; then
      set-default-theme
    else
      set-background-image
    fi
  elif [ -f "$ThemeShellDir"/gnome-shell.css ]; then
    set-custom-theme "$ThemeShellDir"
  elif [ -z "$theme" ]; then
    select theme in $(list); do
      echo setting "'$theme'" ...
      set-theme "$theme"
      break
    done
  else
    echo "'$theme' is not a valid GDM theme" > /dev/stderr
    exit 3
  fi
}

main() {
  initFun "$@"
  case $1 in
    -s | set)
      smart_backup    # Run intelligent backup before doing anything to the system
      set-theme "$2" "$3"
    ;;
    -r | reset)
      reset
    ;;
    -l | list)
      list
    ;;
    -b | backup)
      backup_action $2
    ;;
    -x | extract)
      extract_default_theme "$2"
    ;;
    -h | --help | help )
      help
    ;;
    -m | manual)
    man $ProgName
    ;;
    -e | examples)
      pagedHelp examples
    ;;
    *)
      notRecognized "$1"
    ;;
  esac
  rm -rf $tmpDir
}

main "$@"
